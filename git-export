#!/bin/bash
#
# Push the current branch to a remote.  Asks before force-pushing and
# helps protect the master branch.
#
# $1 = remote (defaults to the fork repo)
# $2 = branch (defaults to the current branch name)

set -e  # stop on error


CONFIG_HUB_REPO_TYPE=$(git config --get hub.repo.type || echo "")
CONFIG_HUB_REMOTE_FORK=$(git config --get hub.remote.fork || echo "")
CONFIG_BRANCH_MASTER_REMOTE=$(git config --get branch.master.remote || echo "")


current=$(git symbolic-ref --short HEAD)
if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
  remote=${1:-$CONFIG_HUB_REMOTE_FORK}
else
  remote=${1:-${CONFIG_BRANCH_MASTER_REMOTE:-origin}}
fi
branch=${2:-$current}


function ask() {
  question="$1"
  default="$2"
  options="$3"
  prompt="> "
  if [[ -n "$default" ]]; then
    prompt="[$default]$prompt"
  fi
  if [[ -n "$options" ]]; then
    prompt="($options) $prompt"
  fi
  while true; do
    echo "$question" > /dev/tty
    read -p "$prompt" reply < /dev/tty
    if [[ -n "$default" ]] && [[ -z "$reply" ]]; then
      reply="$default"
    fi
    if [[ -n "$reply" ]]; then
      echo "$reply"
      return
    fi
  done
}


function confirm() {
  question="$1"
  default="$2"
  options="yes/no"
  while true; do
    reply=$(ask "$question" "$default" "$options")
    case "$reply" in
      [Yy]*)
        return 0 ;;
      [Nn]*)
        return 1 ;;
    esac
  done
}


echo
echo "Checking status of $remote/$current..."
status=$(git remote-status $remote $current)
echo "    status: $status"

echo
if [[ $status =~ "up-to-date" ]]; then
  :
elif [[ $status =~ "new" ]] || [[ $status =~ "push" ]]; then
  echo "Pushing $current to $remote/$branch..."
  if [[ $branch == "master" ]]; then
    echo "> git push --tags $remote $current:$branch"
    git push --tags $remote $current:$branch
    echo "> git remote prune $remote"
    git remote prune $remote
  else
    echo "> git push $remote $current:$branch"
    git push $remote $current:$branch
  fi
else
  if [[ $status =~ "pull" ]]; then
    echo "Warning: $current is behind $remote/$branch"
  fi
  if [[ $branch == "master" ]]; then
    echo "Error: aborting attempted force-push to $remote/$branch"
    exit 1
  elif confirm "Do you want to force-push $current to $remote/$branch?"; then
    echo "Pushing $current to $remote/$branch..."
    echo "> git push --force $remote $current:$branch"
    git push --force $remote $current:$branch
  else
    echo "Error: skipped force-push to $remote/$branch"
    exit 1
  fi
fi
echo "Done."
